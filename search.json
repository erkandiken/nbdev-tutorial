[
  {
    "objectID": "card.html",
    "href": "card.html",
    "title": "card – A basic playing card",
    "section": "",
    "text": "suits\n\n['♣️', '♦️', '❤️', '♠️']\n\n\n\nsuits[0]\n\n'♣️'\n\n\n\nranks\n\n[None, 'A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']\n\n\n\nranks[1]\n\n'A'\n\n\n\nc = Card(suit=1, rank=3)\nc\n\n3♦️\n\n\n\nsource\n\nCard\n\n Card (suit:int, rank:int)\n\nA playing card\n\n\n\n\nType\nDetails\n\n\n\n\nsuit\nint\nAn index into ‘suits’\n\n\nrank\nint\nAn index into ‘ranks’\n\n\n\n\ntest_eq??\n\nSignature: test_eq(a, b)\nSource:   \ndef test_eq(a,b):\n    \"`test` that `a==b`\"\n    test(a,b,equals, '==')\nFile:      ~/Development/nbdev_tutorial/lib/python3.10/site-packages/fastcore/test.py\nType:      function\n\n\n\nsource\n\n\nCard.__eq__\n\n Card.__eq__ (a:__main__.Card)\n\nReturn self==value.\n\ntry:\n    test_eq(Card(suit=2, rank=3), Card(suit=1, rank=3))\nexcept AssertionError as e:\n    print(e)\n\n==:\n3❤️\n3♦️\n\n\n\nassert Card(suit=1, rank=3)\n\n\nassert Card(suit=3, rank=3)>Card(suit=2, rank=3)\nassert not Card(suit=1, rank=3)>Card(suit=2, rank=3)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "nbdev-tutorial",
    "section": "",
    "text": "This file will become your README and also the index of your documentation."
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "nbdev-tutorial",
    "section": "Install",
    "text": "Install\npip install nbdev_tutorial"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "nbdev-tutorial",
    "section": "How to use",
    "text": "How to use\nFill me in please! Don’t forget code examples:\n\nCard(1,3)\n\n3♦️\n\n\n\nsuits\n\n['♣️', '♦️', '❤️', '♠️']"
  },
  {
    "objectID": "deck.html",
    "href": "deck.html",
    "title": "deck",
    "section": "",
    "text": "source\n\nDeck\n\n Deck ()\n\nA deck of 52 cards, not including jokers\n\ndeck = Deck()\ndeck\n\nA♣️; 2♣️; 3♣️; 4♣️; 5♣️; 6♣️; 7♣️; 8♣️; 9♣️; 10♣️; J♣️; Q♣️; K♣️; A♦️; 2♦️; 3♦️; 4♦️; 5♦️; 6♦️; 7♦️; 8♦️; 9♦️; 10♦️; J♦️; Q♦️; K♦️; A❤️; 2❤️; 3❤️; 4❤️; 5❤️; 6❤️; 7❤️; 8❤️; 9❤️; 10❤️; J❤️; Q❤️; K❤️; A♠️; 2♠️; 3♠️; 4♠️; 5♠️; 6♠️; 7♠️; 8♠️; 9♠️; 10♠️; J♠️; Q♠️; K♠️\n\n\n\ntest_eq(len(deck), 52)\n\n\nCard(1,1) in deck\n\nTrue\n\n\n\nsource\n\n\nDeck.remove\n\n Deck.remove (card:__main__.Deck)\n\nRemoves card from the deck and raises exception if it is not there\n\n\n\n\nType\nDetails\n\n\n\n\ncard\nDeck\nCard to remove\n\n\n\n\ncard23 = Card(2, 3)\ndeck.remove(card23)\nassert card23 not in deck\n\n\nsource\n\n\nDeck.remove\n\n Deck.remove (card:__main__.Deck)\n\nRemoves card from the deck and raises exception if it is not there\n\n\n\n\nType\nDetails\n\n\n\n\ncard\nDeck\nCard to remove\n\n\n\n\nsource\n\n\ndraw_n\n\n draw_n (n:int, replace:bool=True)\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nn\nint\n\nnumber of cards to draw\n\n\nreplace\nbool\nTrue\nwhether or not draw with replacement\n\n\n\n\ndraw_n(13, replace=False)\n\n[10♦️, 5♣️, 3♣️, J♣️, A❤️, 2♠️, 2❤️, K♦️, 9❤️, 6❤️, A♠️, 3♦️, 6♣️]"
  }
]